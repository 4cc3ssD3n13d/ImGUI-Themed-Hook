

#include <windows.h>
#include <d3d9.h>
#include <d3dx9.h>
#include <iostream>
#include <fstream>
#include <vector>

#include "ImGui/imgui.h"
#include "ImGui/imgui_internal.h"
#include "ImGui/imgui_impl_dx9.h"
#include "ImGui/imgui_impl_win32.h"

#include "rawData.h"
#include "Detours.h"
#include "Hook.h"
#include "Cursor.h"

#include <process.h>

#pragma comment (lib, "d3dx9.lib")
#pragma comment (lib, "d3d9.lib")

#pragma comment(lib, "legacy_stdio_definitions.lib")

using namespace std;

namespace bytes
{
	BYTE myFile[] = { 0x89, 0x50, 0x4E, 0x47, 0xD, 0xA, 0x1A, 0xA, 0x0, 0x0, 0x0, 0xD, 0x49, 0x48, 0x44, 0x52, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x60, 0x8, 0x6, 0x0, 0x0, 0x0, 0xE2, 0x98, 0x77, 0x38, 0x0, 0x0, 0x0, 0x6, 0x62, 0x4B, 0x47, 0x44, 0x0, 0xFF, 0x0, 0xFF, 0x0, 0xFF, 0xA0, 0xBD, 0xA7, 0x93, 0x0, 0x0, 0x6, 0xF4, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9C, 0xED, 0x9C, 0x6D, 0x88, 0x15, 0x55, 0x18, 0xC7, 0xFF, 0xCF, 0xCC, 0xBD, 0x7B, 0xD5, 0x44, 0x4B, 0x52, 0x32, 0xD7, 0xDE, 0x48, 0x8A, 0x92, 0x88, 0xE8, 0x43, 0x4, 0x7D, 0x8, 0xD2, 0xD0, 0xD0, 0x2C, 0x62, 0xD9, 0xBD, 0x77, 0x53, 0x44, 0x72, 0xD5, 0xAB, 0xB2, 0x29, 0x88, 0x7D, 0xC9, 0x2B, 0x54, 0x98, 0x94, 0xC6, 0xEA, 0xBA, 0xAC, 0xE8, 0x7, 0x75, 0x77, 0x6F, 0xD, 0x66, 0x52, 0xB4, 0x56, 0x96, 0x49, 0x48, 0x4, 0x5, 0x81, 0xAF, 0xA4, 0x99, 0x96, 0x2F, 0xD1, 0x2A, 0x8A, 0xA8, 0x9B, 0x77, 0xE7, 0xE5, 0xE9, 0xC3, 0x75, 0x70, 0xDD, 0xF6, 0x65, 0xDE, 0xCF, 0x99, 0xDD, 0xF9, 0x7D, 0xDC, 0x7B, 0xE6, 0xCC, 0x7F, 0x9F, 0x1F, 0x73, 0xE6, 0xCE, 0x99, 0x7B, 0xE, 0x21, 0xE6, 0x6C, 0x2A, 0x16, 0x5F, 0x62, 0xE6, 0x66, 0x30, 0xEE, 0x4, 0xF0, 0xF, 0x3, 0xA7, 0x15, 0xF0, 0x37, 0x86, 0xAA, 0xEE, 0x5C, 0x5A, 0x5D, 0x7D, 0x52, 0x74, 0xBE, 0x81, 0x20, 0xD1, 0x1, 0xFC, 0xD2, 0xD8, 0xDA, 0x76, 0x6, 0x40, 0x65, 0x2F, 0x1F, 0x99, 0x60, 0x14, 0x15, 0x33, 0xB5, 0x72, 0xE1, 0x9C, 0xAA, 0x73, 0x51, 0xE7, 0x72, 0x8A, 0x22, 0x3A, 0x40, 0x0, 0xF4, 0x56, 0x7C, 0x0, 0x50, 0x41, 0xA8, 0xB5, 0x52, 0xC6, 0xD1, 0xC6, 0xB6, 0xB6, 0x45, 0x85, 0x42, 0x41, 0xCA, 0xFF, 0x75, 0x30, 0x5C, 0x1, 0xEC, 0xB0, 0xE9, 0x41, 0x30, 0x6D, 0x54, 0xC9, 0xDA, 0x4F, 0xD7, 0x46, 0x9D, 0xAB, 0xAB, 0x9B, 0xD1, 0x19, 0x6A, 0x30, 0x87, 0xC, 0x25, 0x1, 0x3D, 0x39, 0x4B, 0xAC, 0xCC, 0x5F, 0x54, 0x5B, 0xBD, 0x27, 0xD0, 0x40, 0x2E, 0x91, 0xF2, 0xB2, 0x8C, 0x88, 0x4A, 0x26, 0xAB, 0x59, 0x74, 0x88, 0xC1, 0x20, 0xE0, 0xAC, 0x8F, 0x63, 0x27, 0x6, 0x96, 0xC2, 0x23, 0xB1, 0x17, 0x40, 0xAC, 0xCC, 0x87, 0x3F, 0x9, 0x42, 0x89, 0xFD, 0x3D, 0xC0, 0xA6, 0xB9, 0xF9, 0x8B, 0x11, 0xA5, 0xD1, 0xD7, 0xC7, 0x2B, 0x96, 0xF5, 0x3C, 0x31, 0x96, 0x0, 0x78, 0xC2, 0xC9, 0x71, 0xF9, 0x5C, 0x56, 0x68, 0xD, 0x6, 0x8D, 0x80, 0xEE, 0x14, 0xA, 0x5, 0xE5, 0xEE, 0x49, 0x93, 0xEA, 0x8, 0xB4, 0x6, 0xC0, 0xA8, 0xFE, 0xDA, 0x26, 0x2, 0x42, 0xA4, 0x69, 0x9B, 0x36, 0xC1, 0x4A, 0x19, 0xEF, 0x1, 0xC8, 0x1, 0x50, 0x7B, 0x69, 0x72, 0x26, 0x9F, 0xCB, 0xDE, 0x17, 0x71, 0xAC, 0xDB, 0x18, 0xD4, 0x2, 0x6C, 0x36, 0xB5, 0xB6, 0x3E, 0xC4, 0x4C, 0xAF, 0x81, 0x78, 0x2A, 0xA0, 0xDC, 0xF, 0xF0, 0x78, 0x0, 0x97, 0x40, 0x98, 0x9F, 0xCF, 0x66, 0xBF, 0x12, 0x9D, 0x2F, 0x21, 0x61, 0xE8, 0x12, 0xCB, 0x21, 0xA8, 0xA1, 0xBD, 0x3D, 0xA3, 0x5C, 0xBE, 0xB2, 0x9A, 0x98, 0xE7, 0x0, 0x0, 0x13, 0x6D, 0xB3, 0xEE, 0x1A, 0xBD, 0x6A, 0xE9, 0xF4, 0xE9, 0x25, 0xD1, 0xD9, 0xDC, 0x12, 0x3B, 0x1, 0x9A, 0xA6, 0x55, 0x5C, 0xD0, 0x8D, 0x9D, 0x0, 0x66, 0x74, 0xFF, 0x3B, 0x1, 0x5F, 0xF, 0xEF, 0x2A, 0xCD, 0x9A, 0x3B, 0x77, 0xEE, 0xD, 0x41, 0xD1, 0x3C, 0x11, 0x2B, 0x1, 0x7D, 0x15, 0xDF, 0x26, 0x8E, 0x12, 0x62, 0x23, 0x60, 0xA0, 0xE2, 0xDB, 0xC4, 0x4D, 0x42, 0x2C, 0x4, 0x38, 0x2D, 0xBE, 0x4D, 0x9C, 0x24, 0x48, 0x2F, 0xC0, 0x6D, 0xF1, 0x6D, 0xE2, 0x22, 0x41, 0x6A, 0x1, 0x5E, 0x8B, 0x6F, 0x13, 0x7, 0x9, 0xD2, 0xA, 0xF0, 0x5B, 0x7C, 0x1B, 0xD9, 0x25, 0x48, 0x29, 0x20, 0xA8, 0xE2, 0xDB, 0xC8, 0x2C, 0x41, 0x3A, 0x1, 0x41, 0x17, 0xDF, 0x46, 0x56, 0x9, 0x52, 0x9, 0x8, 0xAB, 0xF8, 0x36, 0x32, 0x4A, 0x90, 0x46, 0x40, 0xD8, 0xC5, 0xB7, 0x91, 0x4D, 0x82, 0x14, 0x2, 0xA2, 0x2A, 0xBE, 0x8D, 0x4C, 0x12, 0x84, 0xB, 0x88, 0xBA, 0xF8, 0x36, 0xB2, 0x48, 0x10, 0x2A, 0x40, 0x54, 0xF1, 0x6D, 0x64, 0x90, 0x20, 0x4C, 0x80, 0xE8, 0xE2, 0xDB, 0x88, 0x96, 0x20, 0x44, 0x80, 0x2C, 0xC5, 0xB7, 0x11, 0x29, 0x21, 0x72, 0x1, 0xB2, 0x15, 0xDF, 0x46, 0x94, 0x84, 0x48, 0x5, 0xC8, 0x5A, 0x7C, 0x1B, 0x11, 0x12, 0x22, 0x13, 0x20, 0x7B, 0xF1, 0x6D, 0xA2, 0x96, 0x10, 0x89, 0x80, 0xB8, 0x14, 0xDF, 0x26, 0x4A, 0x9, 0xA1, 0xFF, 0x36, 0xB4, 0xA1, 0xBD, 0x3D, 0x73, 0x41, 0xD7, 0x77, 0x23, 0x26, 0xC5, 0x7, 0x0, 0x6, 0x5E, 0xEC, 0xAC, 0xA8, 0xD8, 0xD5, 0xD0, 0xDE, 0x9E, 0x9, 0xFB, 0x5C, 0xA1, 0xB, 0x50, 0x2E, 0x5F, 0x59, 0xD, 0xD0, 0xB4, 0x0, 0xBB, 0x3C, 0x4, 0x70, 0x3D, 0x13, 0x26, 0x77, 0x9A, 0xC6, 0xC8, 0x4E, 0xD3, 0x18, 0xC9, 0x84, 0xC9, 0x0, 0xD7, 0x83, 0x70, 0x38, 0xB8, 0xD3, 0xD0, 0xB4, 0x72, 0xF6, 0x70, 0x49, 0x85, 0x7D, 0x2, 0x2, 0xCF, 0xE, 0xA8, 0xAB, 0x12, 0x83, 0xDF, 0xBC, 0x78, 0xE2, 0x44, 0x73, 0xA1, 0x50, 0xB0, 0x7A, 0x7C, 0x76, 0x4, 0xC0, 0x11, 0x4D, 0xD3, 0x36, 0x5E, 0xEC, 0x32, 0x17, 0x58, 0xC4, 0xEB, 0x8, 0xA8, 0xF0, 0x7B, 0xC2, 0x9B, 0xD9, 0x57, 0xFA, 0xED, 0xA7, 0x3F, 0x42, 0x17, 0x0, 0x60, 0x7C, 0x0, 0x7D, 0x94, 0x0, 0x9E, 0xB6, 0x38, 0x97, 0xFB, 0xBE, 0xBF, 0x46, 0x55, 0x55, 0x55, 0x26, 0x80, 0xC6, 0xA6, 0xB6, 0xB6, 0x63, 0x26, 0x63, 0x4F, 0x0, 0x12, 0x82, 0xC8, 0xDE, 0x2F, 0xB1, 0x58, 0x1F, 0x40, 0x4C, 0xF5, 0xF9, 0x1, 0x8A, 0xDF, 0x9D, 0x85, 0xD9, 0xEC, 0x3E, 0x2, 0x2F, 0xF, 0x33, 0x53, 0x50, 0xC4, 0x41, 0xC0, 0xA1, 0x8E, 0xDF, 0x7F, 0xDB, 0xEC, 0xF6, 0xA0, 0xB1, 0xE9, 0x74, 0x13, 0xCA, 0x43, 0x93, 0xD4, 0x48, 0x2F, 0x80, 0x41, 0x5B, 0x7A, 0x19, 0xF3, 0x7, 0xA4, 0x3C, 0x1C, 0xD1, 0xD6, 0x30, 0x32, 0x5, 0x89, 0xF4, 0x2, 0x52, 0x6C, 0x7E, 0xEB, 0xF5, 0x58, 0xC5, 0xA4, 0xBD, 0x41, 0x66, 0x9, 0x3, 0xE9, 0x5, 0x98, 0x15, 0x15, 0x7F, 0x79, 0x3D, 0xB6, 0x42, 0xBF, 0xFE, 0x67, 0x90, 0x59, 0xC2, 0x40, 0x7A, 0x1, 0xC3, 0xAE, 0x5E, 0xF5, 0xFC, 0xB4, 0x7E, 0x3D, 0x93, 0x11, 0xFE, 0xC2, 0x69, 0x20, 0xA4, 0x17, 0xA0, 0x67, 0x32, 0x9E, 0x97, 0x92, 0xA6, 0xAD, 0x94, 0xD0, 0xE5, 0x47, 0x4E, 0xF0, 0xFD, 0x1C, 0xB0, 0x45, 0xD3, 0xC6, 0xDC, 0xE8, 0x32, 0x67, 0x11, 0x61, 0x26, 0xC0, 0x8F, 0xA2, 0xBC, 0x77, 0xC3, 0x1D, 0xFE, 0xA3, 0x95, 0x31, 0x89, 0xA6, 0x0, 0x38, 0xEA, 0xE5, 0x58, 0x4B, 0xE5, 0x29, 0x7E, 0xCF, 0xDF, 0x63, 0x25, 0xFE, 0x75, 0x94, 0x97, 0xC4, 0x1E, 0x23, 0xC2, 0xE7, 0x60, 0xDE, 0xBD, 0x28, 0x97, 0xBB, 0xEC, 0xA7, 0x7F, 0xCF, 0x97, 0xE8, 0x3A, 0x4D, 0x1B, 0x9E, 0x31, 0x8C, 0x65, 0x60, 0xAC, 0xC0, 0x0, 0x2B, 0x11, 0x7D, 0x41, 0x38, 0x3C, 0x36, 0x95, 0x7A, 0xF2, 0xE6, 0x43, 0x96, 0x63, 0x34, 0x4D, 0x53, 0x3B, 0x74, 0xE3, 0x20, 0x1, 0x8F, 0x85, 0x15, 0xD, 0xC0, 0x15, 0x6, 0xAF, 0xED, 0x4A, 0xA7, 0xD7, 0x2F, 0xAB, 0xAA, 0xFA, 0xD7, 0x4B, 0x7, 0x9E, 0x86, 0xA0, 0x86, 0x96, 0x96, 0xCA, 0x8C, 0xAE, 0x1F, 0x0, 0xE3, 0x1D, 0x84, 0x59, 0x7C, 0x0, 0x60, 0x4C, 0xBE, 0xD8, 0x65, 0x2E, 0x70, 0x7B, 0x58, 0x87, 0x6E, 0xE6, 0x43, 0x2E, 0x3E, 0x0, 0x8C, 0x26, 0xD0, 0xBB, 0x19, 0xDD, 0xF8, 0xA1, 0x69, 0x9B, 0x36, 0xC1, 0x4B, 0x7, 0xAE, 0xAF, 0x80, 0x86, 0x96, 0x96, 0x4A, 0x55, 0x51, 0x7E, 0x2, 0xC3, 0xD3, 0x9, 0xBD, 0xC0, 0x40, 0x17, 0x98, 0xA6, 0x2F, 0xAE, 0xAD, 0xF9, 0xCE, 0x49, 0xFB, 0x4D, 0xAD, 0xAD, 0x2F, 0x30, 0xA8, 0x1D, 0x40, 0x3A, 0xE4, 0x68, 0xDD, 0x39, 0xAB, 0x18, 0xA9, 0x67, 0xDC, 0xEE, 0x4D, 0xE4, 0x4A, 0xC0, 0x3A, 0x4D, 0x1B, 0x9E, 0xD1, 0xF5, 0x3, 0x0, 0x3D, 0xE5, 0x2E, 0x9B, 0x7F, 0x18, 0xE8, 0x22, 0xF0, 0xF2, 0xB1, 0xE9, 0x74, 0x53, 0x5F, 0xC3, 0x51, 0x79, 0xD8, 0x31, 0xF3, 0x4, 0xFE, 0x0, 0xD1, 0x16, 0xDF, 0xE6, 0x97, 0x11, 0x5D, 0xA5, 0xE7, 0xDC, 0xBC, 0x47, 0x70, 0x75, 0x13, 0xCE, 0x18, 0xC6, 0x32, 0x11, 0xC5, 0x7, 0x80, 0xF2, 0xC4, 0x1A, 0x6D, 0xB8, 0xA0, 0x1B, 0xB, 0x1A, 0x5B, 0x8B, 0x5B, 0x15, 0x93, 0xF6, 0x5A, 0xC3, 0x94, 0xD3, 0x0, 0xA0, 0xDC, 0xB0, 0x1E, 0xE0, 0x94, 0x35, 0xB5, 0x43, 0x37, 0xE6, 0x45, 0x30, 0xEC, 0xF4, 0xC7, 0xD3, 0x9D, 0x99, 0x4C, 0x3D, 0x80, 0x35, 0x4E, 0xF, 0x70, 0x7C, 0x5, 0x6C, 0xD1, 0xB4, 0x31, 0x25, 0xDD, 0x38, 0x85, 0xB0, 0xC7, 0xFC, 0xF8, 0x73, 0x85, 0xC0, 0xF, 0x3A, 0xFD, 0x76, 0xE4, 0xF8, 0x26, 0x5C, 0xD2, 0xF5, 0x57, 0x90, 0x14, 0xDF, 0x9, 0xA3, 0x19, 0x78, 0xD9, 0x69, 0x63, 0x17, 0xDF, 0x82, 0x94, 0xD8, 0xBC, 0x52, 0x14, 0xE, 0xD1, 0x4C, 0xA7, 0x4D, 0xDD, 0x7C, 0xD, 0x7D, 0xDC, 0x43, 0x94, 0xA1, 0x9, 0x3B, 0xBF, 0xF, 0xB9, 0x10, 0xC0, 0xF7, 0x78, 0xC9, 0x32, 0x44, 0x71, 0xFC, 0x15, 0xDD, 0xCD, 0x15, 0x30, 0xD2, 0x43, 0x90, 0xA1, 0x8A, 0xE3, 0x5A, 0x85, 0xF7, 0x4E, 0x98, 0xF1, 0xA5, 0x62, 0xA6, 0xEA, 0x7A, 0x3E, 0x98, 0x34, 0xB4, 0xB4, 0x54, 0xAA, 0x44, 0x9B, 0x3, 0xFE, 0xA5, 0x44, 0x70, 0x44, 0x9C, 0x3B, 0xB4, 0xD9, 0x50, 0x13, 0xD6, 0x82, 0xDE, 0x9E, 0xA, 0x97, 0xD6, 0xD6, 0x9E, 0x85, 0xA2, 0xD4, 0x85, 0x75, 0x5E, 0xBF, 0x44, 0x9D, 0x3B, 0x34, 0x1, 0x4B, 0x6B, 0x6B, 0xFB, 0xDC, 0x48, 0x2F, 0x5F, 0x53, 0x73, 0x26, 0xAC, 0xF3, 0xFA, 0x25, 0xEA, 0xDC, 0xD2, 0xBF, 0xF, 0x18, 0xEC, 0x24, 0x2, 0x4, 0x93, 0x8, 0x10, 0x4C, 0x68, 0x2, 0x1A, 0x5A, 0x5A, 0xFA, 0xDA, 0xD5, 0x1C, 0x8D, 0xC5, 0xA2, 0xF0, 0x1D, 0x6B, 0xFB, 0x22, 0xEA, 0xDC, 0xA1, 0x9, 0x50, 0x89, 0x36, 0xF7, 0xF6, 0xCF, 0x34, 0x16, 0x8B, 0x13, 0x61, 0xB2, 0xEB, 0x1F, 0x5A, 0x45, 0x45, 0xD4, 0xB9, 0x1D, 0xCF, 0x86, 0xFA, 0xD8, 0xA5, 0x7C, 0x48, 0xE2, 0x74, 0x43, 0xD8, 0xE4, 0x1E, 0x20, 0x98, 0xB8, 0x9, 0x30, 0x0, 0xDA, 0xC5, 0xE0, 0x1A, 0x56, 0x95, 0x47, 0x8, 0x3C, 0x86, 0xC0, 0x63, 0x4C, 0x55, 0x79, 0x98, 0x41, 0xB3, 0x1, 0xFE, 0xA4, 0xDC, 0x26, 0x3E, 0x44, 0xF1, 0xF3, 0xF4, 0x40, 0x60, 0x60, 0x9F, 0x2, 0x7E, 0x63, 0x51, 0x2E, 0xFB, 0x47, 0x2F, 0x1F, 0x5F, 0x6, 0x70, 0x12, 0xC0, 0x8E, 0xD, 0xDB, 0xB7, 0x3F, 0xA8, 0xA8, 0xA9, 0x75, 0x0, 0x66, 0x45, 0x9B, 0xD0, 0x1B, 0xB1, 0x10, 0xC0, 0xA0, 0xF7, 0xF3, 0xD9, 0xEA, 0xB7, 0x88, 0x68, 0xC0, 0xFB, 0xD0, 0x92, 0xD9, 0xB3, 0x4F, 0x31, 0xF3, 0xAB, 0x9B, 0xDA, 0x3E, 0xAE, 0x7, 0xF8, 0x43, 0x48, 0xB0, 0x1D, 0x43, 0x7F, 0x48, 0x3F, 0x4, 0x11, 0xE1, 0xA3, 0xC5, 0xB9, 0x9A, 0x95, 0x4E, 0x8A, 0x7F, 0xEB, 0x18, 0xE2, 0x7C, 0xAE, 0x66, 0x3D, 0x38, 0xDC, 0xD5, 0x2D, 0x41, 0x20, 0xF9, 0x6C, 0x28, 0xFF, 0xAC, 0x5E, 0xBD, 0xB6, 0xC2, 0x6B, 0x84, 0x7C, 0x6D, 0x76, 0x6D, 0x63, 0x6B, 0xF1, 0x59, 0x80, 0x1D, 0xBF, 0x22, 0x4C, 0x66, 0x43, 0xBB, 0xA3, 0x28, 0xF5, 0x75, 0x75, 0x75, 0xBA, 0xAF, 0x1C, 0x2A, 0x2D, 0x7, 0xE0, 0x78, 0x4B, 0xE3, 0x64, 0x36, 0xF4, 0x16, 0x7, 0xF2, 0x35, 0x35, 0x3F, 0xFA, 0xCE, 0x51, 0x5D, 0x7D, 0x12, 0x84, 0x76, 0xC7, 0xED, 0x93, 0xD9, 0xD0, 0x32, 0x44, 0xF8, 0x2C, 0xB0, 0xCE, 0x98, 0x3F, 0xD, 0xAC, 0xAF, 0x80, 0x91, 0x56, 0x80, 0x65, 0x2A, 0xFB, 0x83, 0xEA, 0x4B, 0x65, 0xFE, 0x35, 0xA8, 0xBE, 0x82, 0x46, 0x5A, 0x1, 0x69, 0xD5, 0xF2, 0xBC, 0x32, 0xE6, 0x7F, 0x7D, 0x95, 0x4A, 0xD2, 0xBE, 0x0, 0x92, 0x76, 0x36, 0xF4, 0xEF, 0xE3, 0xC7, 0x2F, 0x5, 0x95, 0x65, 0xDE, 0xBC, 0x79, 0x57, 0x9D, 0xB6, 0x4D, 0x66, 0x43, 0x6F, 0xE2, 0x65, 0x65, 0x64, 0x10, 0x44, 0x3D, 0x1B, 0x1A, 0xE2, 0x93, 0x30, 0x4D, 0x53, 0x89, 0xCE, 0x34, 0xB6, 0xB6, 0xDD, 0xFE, 0x67, 0x8B, 0x25, 0x7F, 0x36, 0x8D, 0x36, 0xB7, 0xB4, 0xF7, 0x80, 0xA1, 0x42, 0x22, 0x40, 0x30, 0x89, 0x0, 0xC1, 0x24, 0x2, 0x4, 0x93, 0x8, 0x10, 0x4C, 0x22, 0x40, 0x30, 0x89, 0x0, 0xC1, 0x24, 0x2, 0x4, 0xE3, 0x46, 0xC0, 0xF9, 0xD0, 0x52, 0xF4, 0x84, 0xE0, 0x6A, 0xAD, 0xAD, 0x43, 0xA4, 0xCC, 0xEF, 0x58, 0x0, 0x83, 0x76, 0x78, 0x4B, 0xE3, 0x1, 0xB, 0x81, 0x9F, 0x4B, 0xD6, 0xFC, 0x8E, 0xA7, 0x22, 0xC6, 0xA5, 0xD5, 0xB7, 0x3B, 0x74, 0x13, 0x4, 0x7E, 0x1D, 0xC0, 0xBD, 0x9E, 0x82, 0xD, 0xCC, 0x79, 0x6, 0xED, 0x18, 0x57, 0xA1, 0xAE, 0xA, 0xBA, 0xE3, 0xB8, 0xE7, 0x4F, 0x48, 0x48, 0x48, 0x48, 0x18, 0x7C, 0xFC, 0x7, 0xCB, 0xC2, 0x25, 0x1C, 0x47, 0x68, 0x55, 0x5, 0x0, 0x0, 0x0, 0x0, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82 };
}

LPDIRECT3DTEXTURE9 img0;

LPDIRECT3DTEXTURE9 DrawCursor;


HANDLE MEMORY = OpenProcess(PROCESS_ALL_ACCESS, 0, GetCurrentProcessId());

DWORD dwZFunc = NULL;

void InputHandler()
{
	for (int i = 0; i < 5; i++) ImGui::GetIO().MouseDown[i] = false;
	int button = -1;
	if (GetAsyncKeyState(VK_LBUTTON)) button = 0;
	if (button != -1) ImGui::GetIO().MouseDown[button] = true;
}

HRESULT GenerateTexture(IDirect3DDevice9 *pD3Ddev, IDirect3DTexture9 **ppD3Dtex, DWORD colour32)
{
	pD3Ddev->CreateTexture(8, 8, 1, 0, D3DFMT_A4R4G4B4, D3DPOOL_MANAGED, ppD3Dtex, NULL);

	WORD colour16 = ((WORD)((colour32 >> 28) & 0xF) << 12)
		| (WORD)(((colour32 >> 20) & 0xF) << 8)
		| (WORD)(((colour32 >> 12) & 0xF) << 4)
		| (WORD)(((colour32 >> 4) & 0xF) << 0);

	D3DLOCKED_RECT d3dlr;
	(*ppD3Dtex)->LockRect(0, &d3dlr, 0, 0);
	WORD *pDst16 = (WORD*)d3dlr.pBits;

	for (int xy = 0; xy < 8 * 8; xy++)
		*pDst16++ = colour16;


	return S_OK;
}

D3DCOLOR FLOAT4TOD3DCOLOR(float Col[])
{
	ImU32 col32_no_alpha = ImGui::ColorConvertFloat4ToU32(ImVec4(Col[0], Col[1], Col[2], Col[3]));
	float a = (col32_no_alpha >> 24) & 255;
	float r = (col32_no_alpha >> 16) & 255;
	float g = (col32_no_alpha >> 8) & 255;
	float b = col32_no_alpha & 255;
	return D3DCOLOR_ARGB((int)a, (int)b, (int)g, (int)r);
}



extern LRESULT ImGui_ImplWin32_WndProcHandler(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
	if (ShowMenu && ImGui_ImplWin32_WndProcHandler(hWnd, msg, wParam, lParam))
	{
		//Log("ImGui_ImplWin32_WndProcHandler");
		return true;
	}

	return CallWindowProc(oWndProc, hWnd, msg, wParam, lParam);
}

HRESULT APIENTRY Present_hook(IDirect3DDevice9* pDevice, const RECT *pSourceRect, const RECT *pDestRect, HWND hDestWindowOverride, const RGNDATA *pDirtyRegion)
{
	
	if (GetAsyncKeyState(VK_INSERT) & 1) Menu = !Menu;
	static bool init = true;
	if (init)
	{
		init = false;
		ImGui::CreateContext();
		ImGuiIO& io = ImGui::GetIO();
		D3DDEVICE_CREATION_PARAMETERS d3dcp;
		pDevice->GetCreationParameters(&d3dcp);
		TargetWnd = d3dcp.hFocusWindow;
		if (TargetWnd != NULL)
		{
			oWndProc = (WNDPROC)SetWindowLongPtr(TargetWnd, GWLP_WNDPROC, (LONG_PTR)WndProc);
			ImGui_ImplWin32_Init(TargetWnd);
			ImGui_ImplDX9_Init(pDevice);
			ImFont* font = io.Fonts->AddFontFromMemoryTTF((void*)rawData, sizeof(rawData), 15);
			ImGui::GetIO().ImeWindowHandle = TargetWnd;
		}
	}

	//menu key
	//GetAsyncKeyState & 1 may not work in every game
	static auto is_down = false;
	static auto is_clicked = false;
	if (GetAsyncKeyState(VK_INSERT))
	{
		is_clicked = false;
		is_down = true;
	}
	else if (!GetAsyncKeyState(VK_INSERT) && is_down)
	{
		is_clicked = true;
		is_down = false;
	}
	else {
		is_clicked = false;
		is_down = false;
	}

	//show menu
	if (is_clicked)
	{
		ShowMenu = !ShowMenu;
		//save settings
	}

	if (img0 == NULL)
			D3DXCreateTextureFromFileInMemory(pDevice, bytes::myFile, sizeof(bytes::myFile), &img0);

	ImGui_ImplDX9_NewFrame();
	ImGui_ImplWin32_NewFrame();
	ImGui::NewFrame();

	ImGuiStyle& style = ImGui::GetStyle();
	ImGuiColorEditFlags flags = ImGuiColorEditFlags_NoInputs;

	D3DXCreateTextureFromFileInMemory(pDevice, &MJCursor, sizeof(MJCursor), &DrawCursor);

	ImGui::GetIO().MouseDrawCursor = 1;
	ImGui::GetOverlayDrawList()->AddImage(DrawCursor, ImVec2(ImGui::GetIO().MousePos.x, ImGui::GetIO().MousePos.y), ImVec2(ImGui::GetIO().MousePos.x + 20, ImGui::GetIO().MousePos.y + 20));

	if (Menu == 1)
	{
		ImGui::GetIO().MouseDrawCursor = 1;
	}
	else {
		ImGui::GetIO().MouseDrawCursor = 0;
	}

	static int switchTabs;

	if (ShowMenu)
	{
		ImGuiIO& io = ImGui::GetIO(); (void)io;
		ImGui::SetNextWindowPos(ImVec2(40.0f, 40.0f)); //pos
		ImGui::SetNextWindowSize(ImVec2(700.0f, 450.0f), ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoBringToFrontOnFocus); //size
		
		ImGui::Begin("School Project", 0, ImGuiWindowFlags_NoTitleBar || ImGuiWindowFlags_NoCollapse || ImGuiWindowFlags_NoMove);
		ImGui::SetCursorPosX(0); ImGui::SetCursorPosY(0); ImGui::BeginChild("Title", ImVec2(700, 50), false, ImGuiWindowFlags_None);
		ImGui::SetCursorPosX(304); ImGui::SetCursorPosY(-40); ImGui::Image(img0, ImVec2(95, 85));
		pic = 1;


		ImGui::SetCursorPosX(30); ImGui::SetCursorPosY(12);
		if (ImGui::Button("Homework", ImVec2(120, 30))) {
			switchTabs == 0; hometab == 1; school == 0; teacher == 0;
		}

		ImGui::SetCursorPosX(172); ImGui::SetCursorPosY(12);
		if (ImGui::Button("School", ImVec2(120, 30))) {
			switchTabs == 1; school == 1; school == 0; teacher == 0;
		}

		ImGui::SetCursorPosX(550); ImGui::SetCursorPosY(12);
		if (ImGui::Button("Teacher", ImVec2(120, 30))) {
			switchTabs == 2; teacher == 1; school == 0; teacher = 0;
		}


		ImGui::SetCursorPosX(408); ImGui::SetCursorPosY(12);
		if (ImGui::Button("Student", ImVec2(120, 30)))
		//ImGui::SetCursorPosX(410); ImGui::SetCursorPosY(16); ImGui::Image(img4, ImVec2(27, 27));

		ImGui::EndChild();
		ImGui::EndChildFrame();

			ImGui::SetCursorPosX(30); ImGui::SetCursorPosY(90); ImGui::Checkbox("Math Homework", &math);
			ImGui::SetCursorPosX(30); ImGui::Checkbox("Literature Homework", &literature);
			ImGui::SetCursorPosX(30); ImGui::Checkbox("Science Project", &science);

		
			ImGui::SetCursorPosX(30); ImGui::Text("I LOVE MY SCHOOL!");
			ImGui::SetCursorPosX(30); ImGui::Text("My School Name :");


		if (pic == 1) {
		
			ImGui::SetNextWindowPos(ImVec2(344.0f, 0.0f)); //pos
			ImGui::SetNextWindowSize(ImVec2(95.0f, 85.0f));
			ImGui::Begin("resim", reinterpret_cast<bool*>(true), ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoNav | ImGuiWindowFlags_NoDecoration | ImGuiWindowFlags_NoInputs | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_NoBackground | ImGuiWindowFlags_NoFocusOnAppearing | ImGuiWindowFlags_NoNavFocus | ImGuiFocusedFlags_AnyWindow );
			ImGui::SetCursorPosX(0); ImGui::SetCursorPosY(0); ImGui::Image(img0, ImVec2(95, 85));
		
		}

		ImGui::End();
	
	}

	ImGui::GetIO().MouseDrawCursor = Menu;


	ImGui::EndFrame();
	ImGui::Render();
	ImGui_ImplDX9_RenderDrawData(ImGui::GetDrawData());


	return Present_orig(pDevice, pSourceRect, pDestRect, hDestWindowOverride, pDirtyRegion);
}

HRESULT APIENTRY Reset_hook(IDirect3DDevice9* pDevice, D3DPRESENT_PARAMETERS *pPresentationParameters)
{
	ImGui_ImplDX9_InvalidateDeviceObjects();
	HRESULT ResetReturn = Reset_orig(pDevice, pPresentationParameters);
	ImGui_ImplDX9_CreateDeviceObjects();
	return ResetReturn;
}


struct sscreen
{
	int height;
	int width;
}screen;


char* GetFile(char* file);
void  WriteFile(FILE* file, const char* fmt, ...);

HANDLE Process = OpenProcess(PROCESS_ALL_ACCESS, 0, GetCurrentProcessId());



HRESULT APIENTRY SetStreamSource_hook(LPDIRECT3DDEVICE9 pDevice, UINT StreamNumber, IDirect3DVertexBuffer9* pStreamData, UINT OffsetInBytes, UINT sStride)
{
	if (StreamNumber == 0)
		Stride = sStride;

	return SetStreamSource_orig(pDevice, StreamNumber, pStreamData, OffsetInBytes, sStride);
}

DWORD WINAPI Thread(LPVOID)
{
	while (!GetModuleHandleA("d3d9.dll")) {
		Sleep(200);
	}
	IDirect3D9* d3d = Direct3DCreate9(D3D_SDK_VERSION);
	IDirect3DDevice9* d3ddev = NULL;
	HWND tmpWnd = CreateWindowA("BUTTON", "DX", WS_SYSMENU | WS_MINIMIZEBOX, CW_USEDEFAULT, CW_USEDEFAULT, 300, 300, NULL, NULL, Hand, NULL);
	D3DPRESENT_PARAMETERS d3dpp;
	ZeroMemory(&d3dpp, sizeof(d3dpp));
	d3dpp.Windowed = TRUE;
	d3dpp.SwapEffect = D3DSWAPEFFECT_DISCARD;
	d3dpp.hDeviceWindow = tmpWnd;
	d3dpp.BackBufferFormat = D3DFMT_UNKNOWN;
	HRESULT result = d3d->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, tmpWnd, D3DCREATE_SOFTWARE_VERTEXPROCESSING, &d3dpp, &d3ddev);
    #if defined _M_X64
	DWORD64* dVtable = (DWORD64*)d3ddev;
	dVtable = (DWORD64*)dVtable[0];
    #elif defined _M_IX86
	DWORD* dVtable = (DWORD*)d3ddev;
	dVtable = (DWORD*)dVtable[0];
    #endif
	SetStreamSource_orig = (SetStreamSource)dVtable[100];
	DrawIndexedPrimitive_orig = (DrawIndexedPrimitive)dVtable[82];
	Present_orig = (Present)dVtable[17];
	EndScene_orig = (EndScene)dVtable[42];
	Reset_orig = (Reset)dVtable[16];
	Sleep(2000);
	DetourTransactionBegin();
	DetourUpdateThread(GetCurrentThread());
	DetourAttach(&(LPVOID&)SetStreamSource_orig, (PBYTE)SetStreamSource_hook);
	DetourAttach(&(LPVOID&)Present_orig, (PBYTE)Present_hook);
	DetourAttach(&(LPVOID&)Reset_orig, (PBYTE)Reset_hook);
	DetourTransactionCommit();
	d3ddev->Release();
	d3d->Release();
	DestroyWindow(tmpWnd);
	return 1;
}

BOOL WINAPI DllMain(HMODULE hModule, DWORD dwReason, LPVOID lpvReserved)
{
	if (dwReason == DLL_PROCESS_ATTACH) {
		CreateThread(0, 0, Thread, 0, 0, 0);
	}
	return TRUE;
}